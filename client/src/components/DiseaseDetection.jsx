import React, { useState, useRef } from 'react'

const DiseaseDetection = () => {
  const [selectedImage, setSelectedImage] = useState(null)
  const [imagePreview, setImagePreview] = useState(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [results, setResults] = useState(null)
  const [selectedCrop, setSelectedCrop] = useState('')
  const fileInputRef = useRef(null)

  const cropTypes = [
    'рдЧреЗрд╣реВрдВ (Wheat)', 'рдЪрд╛рд╡рд▓ (Rice)', 'рдЯрдорд╛рдЯрд░ (Tomato)', 'рдЖрд▓реВ (Potato)',
    'рдкреНрдпрд╛рдЬ (Onion)', 'рдордХреНрдХрд╛ (Corn)', 'рдХрдкрд╛рд╕ (Cotton)', 'рдЧрдиреНрдирд╛ (Sugarcane)',
    'рд╕рд░рд╕реЛрдВ (Mustard)', 'рд╕реЛрдпрд╛рдмреАрди (Soybean)', 'рдорд┐рд░реНрдЪ (Chili)', 'рдмреИрдВрдЧрди (Eggplant)'
  ]

  const sampleDiseases = {
    'рдЧреЗрд╣реВрдВ': [
      { name: 'Wheat Rust | рдЧреЗрд╣реВрдВ рдХрд╛ рд░рддреБрдЖ рд░реЛрдЧ', severity: 'High', treatment: 'рдкреНрд░реЛрдкрд┐рдХреЛрдирд╛рдЬрд╝реЛрд▓ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ' },
      { name: 'Powdery Mildew | рдЪреВрд░реНрдгрд┐рд▓ рдлрдлреВрдВрджреА', severity: 'Medium', treatment: 'рд╕рд▓реНрдлрд░ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ' }
    ],
    'рдЯрдорд╛рдЯрд░': [
      { name: 'Late Blight | рдЕрдВрдЧрдорд╛рд░реА рд░реЛрдЧ', severity: 'High', treatment: 'рдХреЙрдкрд░ рд╕рд▓реНрдлреЗрдЯ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ' },
      { name: 'Bacterial Wilt | рдЬреАрд╡рд╛рдгреБ рдореБрд░рдЭрд╛рди', severity: 'High', treatment: 'рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЗ рд╣рдЯрд╛ рджреЗрдВ' }
    ],
    'рдЖрд▓реВ': [
      { name: 'Early Blight | рдЕрдЧреЗрддреА рдЕрдВрдЧрдорд╛рд░реА', severity: 'Medium', treatment: 'рдореИрдВрдХреЛрдЬрд╝реЗрдм рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ' },
      { name: 'Potato Scab | рдЖрд▓реВ рдЦреБрд░рдкреА рд░реЛрдЧ', severity: 'Low', treatment: 'рдорд┐рдЯреНрдЯреА рдХрд╛ pH рдХрдо рдХрд░реЗрдВ' }
    ]
  }

  const handleImageSelect = (event) => {
    const file = event.target.files[0]
    if (file) {
      setSelectedImage(file)
      const reader = new FileReader()
      reader.onload = (e) => {
        setImagePreview(e.target.result)
      }
      reader.readAsDataURL(file)
      setResults(null)
    }
  }

  const handleDrop = (event) => {
    event.preventDefault()
    const file = event.dataTransfer.files[0]
    if (file && file.type.startsWith('image/')) {
      setSelectedImage(file)
      const reader = new FileReader()
      reader.onload = (e) => {
        setImagePreview(e.target.result)
      }
      reader.readAsDataURL(file)
      setResults(null)
    }
  }

  const handleDragOver = (event) => {
    event.preventDefault()
  }

  const analyzeImage = () => {
    if (!selectedImage || !selectedCrop) return

    setIsAnalyzing(true)
    
    // Simulate AI analysis
    setTimeout(() => {
      const mockResults = generateMockResults(selectedCrop)
      setResults(mockResults)
      setIsAnalyzing(false)
    }, 3000)
  }

  const generateMockResults = (crop) => {
    const cropKey = crop.split(' ')[0]
    const diseases = sampleDiseases[cropKey] || sampleDiseases['рдЧреЗрд╣реВрдВ']
    
    return {
      confidence: Math.floor(Math.random() * 20) + 80, // 80-99%
      detectedDisease: diseases[Math.floor(Math.random() * diseases.length)],
      recommendations: [
        'рддреБрд░рдВрдд рд╕рдВрдХреНрд░рдорд┐рдд рд╣рд┐рд╕реНрд╕реЗ рдХреЛ рд╣рдЯрд╛ рджреЗрдВ',
        'рдЙрдЪрд┐рдд рдХрд╡рдХрдирд╛рд╢реА рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ',
        'рдкреМрдзреЛрдВ рдХреЗ рдмреАрдЪ рд╣рд╡рд╛ рдХрд╛ рд╕рдВрдЪрд╛рд░ рдмрдврд╝рд╛рдПрдВ',
        'рдкрд╛рдиреА рдХреА рдорд╛рддреНрд░рд╛ рдирд┐рдпрдВрддреНрд░рд┐рдд рдХрд░реЗрдВ',
        'рдирд┐рдпрдорд┐рдд рдирд┐рдЧрд░рд╛рдиреА рд░рдЦреЗрдВ'
      ],
      preventiveMeasures: [
        'рдмреАрдЬ рдЙрдкрдЪрд╛рд░ рдХрд░рдХреЗ рдмреЛрдПрдВ',
        'рдЙрдиреНрдирдд рдХрд┐рд╕реНрдо рдХреЗ рдмреАрдЬ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ',
        'рдлрд╕рд▓ рдЪрдХреНрд░ рдЕрдкрдирд╛рдПрдВ',
        'рдЦреЗрдд рдХреА рд╕рдлрд╛рдИ рд░рдЦреЗрдВ',
        'рд╕рдордп рдкрд░ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ'
      ],
      severity: diseases[0].severity
    }
  }

  const resetAnalysis = () => {
    setSelectedImage(null)
    setImagePreview(null)
    setResults(null)
    setSelectedCrop('')
    if (fileInputRef.current) {
      fileInputRef.current.value = ''
    }
  }

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white rounded-2xl shadow-lg border border-green-100">
      <div className="mb-8 text-center">
        <h2 className="text-3xl font-bold text-green-800 flex items-center justify-center gap-3">
          ЁЯРЫ Disease Detection | рд░реЛрдЧ рдкрд╣рдЪрд╛рди
        </h2>
        <p className="text-green-600 mt-2">
          Upload crop images for AI-powered disease identification
        </p>
      </div>

      {!results ? (
        <div className="space-y-6">
          {/* Crop Selection */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              ЁЯМ╛ Select Crop Type | рдлрд╕рд▓ рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ
            </label>
            <select
              value={selectedCrop}
              onChange={(e) => setSelectedCrop(e.target.value)}
              className="w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-500"
            >
              <option value="">Choose Crop | рдлрд╕рд▓ рдЪреБрдиреЗрдВ</option>
              {cropTypes.map((crop, index) => (
                <option key={index} value={crop}>{crop}</option>
              ))}
            </select>
          </div>

          {/* Image Upload Area */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              ЁЯУ╕ Upload Plant Image | рдкреМрдзреЗ рдХреА рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ
            </label>
            
            {!imagePreview ? (
              <div
                className="border-2 border-dashed border-gray-300 rounded-lg p-12 text-center hover:border-green-400 transition-colors cursor-pointer"
                onDrop={handleDrop}
                onDragOver={handleDragOver}
                onClick={() => fileInputRef.current?.click()}
              >
                <div className="text-4xl mb-4">ЁЯУ▒</div>
                <p className="text-lg text-gray-600 mb-2">
                  Drag & drop image here or click to select
                </p>
                <p className="text-sm text-gray-500 mb-4">
                  рдпрд╣рд╛рдБ рдлреЛрдЯреЛ рдЦреАрдВрдЪреЗрдВ рдпрд╛ рдХреНрд▓рд┐рдХ рдХрд░рдХреЗ рдЪреБрдиреЗрдВ
                </p>
                <p className="text-xs text-gray-400">
                  Supported formats: JPG, PNG, JPEG (Max 5MB)
                </p>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*"
                  onChange={handleImageSelect}
                  className="hidden"
                />
              </div>
            ) : (
              <div className="relative">
                <img
                  src={imagePreview}
                  alt="Uploaded crop"
                  className="w-full max-h-96 object-contain rounded-lg border border-gray-300"
                />
                <button
                  onClick={resetAnalysis}
                  className="absolute top-2 right-2 bg-red-500 text-white p-2 rounded-full hover:bg-red-600 transition-colors"
                >
                  тЬХ
                </button>
              </div>
            )}
          </div>

          {/* Instructions */}
          <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
            <h3 className="font-semibold text-blue-800 mb-2">ЁЯУЛ Photography Tips | рдлреЛрдЯреЛ рдЦреАрдВрдЪрдиреЗ рдХреЗ рдЯрд┐рдкреНрд╕</h3>
            <ul className="text-sm text-blue-700 space-y-1">
              <li>тАв Clear, well-lit photos work best | рд╕рд╛рдл рдФрд░ рдЕрдЪреНрдЫреА рд░реЛрд╢рдиреА рдореЗрдВ рдлреЛрдЯреЛ рд▓реЗрдВ</li>
              <li>тАв Focus on affected leaves/parts | рд░реЛрдЧ рдЧреНрд░рд╕реНрдд рдкрддреНрддрд┐рдпреЛрдВ/рднрд╛рдЧреЛрдВ рдкрд░ рдлреЛрдХрд╕ рдХрд░реЗрдВ</li>
              <li>тАв Include multiple angles if possible | рд╕рдВрднрд╡ рд╣реЛ рддреЛ рдЕрд▓рдЧ-рдЕрд▓рдЧ рдХреЛрдг рд╕реЗ рд▓реЗрдВ</li>
              <li>тАв Avoid blurry or dark images | рдзреБрдВрдзрд▓реА рдпрд╛ рдЕрдВрдзреЗрд░реЗ рдореЗрдВ рд▓реА рдЧрдИ рдлреЛрдЯреЛ рди рд▓реЗрдВ</li>
            </ul>
          </div>

          {/* Analyze Button */}
          <button
            onClick={analyzeImage}
            disabled={!selectedImage || !selectedCrop || isAnalyzing}
            className="w-full bg-green-500 text-white py-4 rounded-lg font-semibold hover:bg-green-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isAnalyzing ? (
              <div className="flex items-center justify-center gap-2">
                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                AI Analyzing Image... | AI рддрд╕реНрд╡реАрд░ рдХреА рдЬрд╛рдВрдЪ рдХрд░ рд░рд╣рд╛ рд╣реИ...
              </div>
            ) : (
              'ЁЯФН Analyze Disease | рд░реЛрдЧ рдХреА рдкрд╣рдЪрд╛рди рдХрд░реЗрдВ'
            )}
          </button>
        </div>
      ) : (
        <div className="space-y-6">
          {/* Analysis Results Header */}
          <div className="text-center">
            <h3 className="text-2xl font-bold text-green-800 mb-2">
              Analysis Complete | рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкреВрд░реНрдг
            </h3>
            <div className="flex items-center justify-center gap-2">
              <span className="text-lg text-gray-600">Confidence Level:</span>
              <span className="text-2xl font-bold text-green-600">{results.confidence}%</span>
            </div>
          </div>

          {/* Disease Detection Result */}
          <div className="bg-gradient-to-r from-red-50 to-orange-50 p-6 rounded-lg border border-red-200">
            <div className="flex items-center gap-4 mb-4">
              <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center">
                <span className="text-2xl">ЁЯжа</span>
              </div>
              <div>
                <h3 className="text-xl font-bold text-red-800">Detected Disease</h3>
                <p className="text-red-600">{results.detectedDisease.name}</p>
              </div>
            </div>
            <div className="flex items-center gap-4">
              <span className={`px-3 py-1 rounded-full text-sm font-semibold ${
                results.severity === 'High' ? 'bg-red-200 text-red-800' :
                results.severity === 'Medium' ? 'bg-yellow-200 text-yellow-800' :
                'bg-green-200 text-green-800'
              }`}>
                Severity: {results.severity}
              </span>
              <div className="text-sm text-red-700">
                <strong>Treatment:</strong> {results.detectedDisease.treatment}
              </div>
            </div>
          </div>

          {/* Immediate Recommendations */}
          <div>
            <h4 className="text-xl font-bold text-gray-800 mb-4">ЁЯЪи Immediate Actions | рддрддреНрдХрд╛рд▓ рдХрд░рдиреЗ рдпреЛрдЧреНрдп</h4>
            <div className="space-y-3">
              {results.recommendations.map((rec, index) => (
                <div key={index} className="flex items-start gap-3 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                  <div className="w-6 h-6 bg-yellow-500 text-white rounded-full flex items-center justify-center text-sm font-bold mt-1">
                    {index + 1}
                  </div>
                  <span className="text-yellow-800 font-medium">{rec}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Prevention Measures */}
          <div>
            <h4 className="text-xl font-bold text-gray-800 mb-4">ЁЯЫбя╕П Prevention Tips | рд░реЛрдХрдерд╛рдо рдХреЗ рдЙрдкрд╛рдп</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {results.preventiveMeasures.map((measure, index) => (
                <div key={index} className="flex items-center gap-3 p-3 bg-green-50 rounded-lg border border-green-200">
                  <span className="text-green-500 text-lg">тЬУ</span>
                  <span className="text-green-800">{measure}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Expert Contact */}
          <div className="bg-blue-50 p-6 rounded-lg border border-blue-200">
            <h4 className="text-lg font-bold text-blue-800 mb-3">ЁЯСитАНЁЯМ╛ Need Expert Help? | рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕рд╣рд╛рдпрддрд╛ рдЪрд╛рд╣рд┐рдП?</h4>
            <p className="text-blue-700 mb-4">
              For severe cases, consult with agricultural experts or visit your nearest agriculture center.
            </p>
            <div className="flex flex-wrap gap-3">
              <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors">
                ЁЯУЮ Call Helpline: 1800-XXX-XXXX
              </button>
              <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors">
                ЁЯУН Find Nearest Center
              </button>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-4 pt-4">
            <button
              onClick={resetAnalysis}
              className="flex-1 bg-gray-500 text-white py-3 rounded-lg font-semibold hover:bg-gray-600 transition-colors"
            >
              ЁЯФД Analyze New Image | рдирдИ рддрд╕реНрд╡реАрд░ рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВ
            </button>
            <button
              onClick={() => window.print()}
              className="flex-1 bg-green-500 text-white py-3 rounded-lg font-semibold hover:bg-green-600 transition-colors"
            >
              ЁЯУД Save Report | рд░рд┐рдкреЛрд░реНрдЯ рд╕реЗрд╡ рдХрд░реЗрдВ
            </button>
          </div>
        </div>
      )}
    </div>
  )
}

export default DiseaseDetection