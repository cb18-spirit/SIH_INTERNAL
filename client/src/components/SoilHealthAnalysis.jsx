import React, { useState } from 'react'

const SoilHealthAnalysis = () => {
  const [formData, setFormData] = useState({
    location: '',
    cropType: '',
    soilType: '',
    lastCrop: '',
    irrigationMethod: '',
    problems: []
  })
  
  const [results, setResults] = useState(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)

  const cropTypes = [
    'рдЧреЗрд╣реВрдВ (Wheat)', 'рдЪрд╛рд╡рд▓ (Rice)', 'рдордХреНрдХрд╛ (Corn)', 'рдмрд╛рдЬрд░рд╛ (Millet)',
    'рдЯрдорд╛рдЯрд░ (Tomato)', 'рдЖрд▓реВ (Potato)', 'рдкреНрдпрд╛рдЬ (Onion)', 'рдЧрдиреНрдирд╛ (Sugarcane)',
    'рдХрдкрд╛рд╕ (Cotton)', 'рд╕рд░рд╕реЛрдВ (Mustard)', 'рдореВрдВрдЧрдлрд▓реА (Groundnut)', 'рд╕реЛрдпрд╛рдмреАрди (Soybean)'
  ]

  const soilTypes = [
    'рдХрд╛рд▓реА рдорд┐рдЯреНрдЯреА (Black Soil)', 'рд▓рд╛рд▓ рдорд┐рдЯреНрдЯреА (Red Soil)', 'рдЬрд▓реЛрдврд╝ рдорд┐рдЯреНрдЯреА (Alluvial Soil)',
    'рджреЛрдордЯ рдорд┐рдЯреНрдЯреА (Loamy Soil)', 'рдмрд▓реБрдИ рдорд┐рдЯреНрдЯреА (Sandy Soil)', 'рдЪрд┐рдХрдиреА рдорд┐рдЯреНрдЯреА (Clay Soil)'
  ]

  const irrigationMethods = [
    'рдмрд╛рд░рд┐рд╢ (Rain-fed)', 'рдирд▓рдХреВрдк (Tube well)', 'рдбреНрд░рд┐рдк рд╕рд┐рдВрдЪрд╛рдИ (Drip)', 
    'рд╕реНрдкреНрд░рд┐рдВрдХрд▓рд░ (Sprinkler)', 'рдлрд╡реНрд╡рд╛рд░рд╛ (Fountain)', 'рдирд╣рд░ (Canal)'
  ]

  const commonProblems = [
    'рдкрддреНрддреЗ рдкреАрд▓реЗ рд╣реЛрдирд╛', 'рдлрд╕рд▓ рдзреАрдореА рдмрдврд╝рдирд╛', 'рдорд┐рдЯреНрдЯреА рд╕рдЦреНрдд рд╣реЛрдирд╛', 'рдЬрд▓ рдЬрдорд╛рд╡',
    'рдХреАрдбрд╝реЗ-рдордХреЛрдбрд╝реЗ', 'рдЦрд░рдкрддрд╡рд╛рд░', 'рдорд┐рдЯреНрдЯреА рдХреА рдирдореА рдХрдо', 'рдкреЛрд╖рдХ рддрддреНрд╡реЛрдВ рдХреА рдХрдореА'
  ]

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const handleProblemToggle = (problem) => {
    setFormData(prev => ({
      ...prev,
      problems: prev.problems.includes(problem)
        ? prev.problems.filter(p => p !== problem)
        : [...prev.problems, problem]
    }))
  }

  const analyzeSoil = () => {
    setIsAnalyzing(true)
    
    // Simulate AI analysis
    setTimeout(() => {
      const recommendations = generateRecommendations(formData)
      setResults(recommendations)
      setIsAnalyzing(false)
    }, 2000)
  }

  const generateRecommendations = (data) => {
    const recommendations = {
      soilHealth: 'Good',
      phLevel: '6.8',
      nutrients: {
        nitrogen: 'Medium',
        phosphorus: 'Low',
        potassium: 'High'
      },
      recommendations: [],
      fertilizers: [],
      warnings: []
    }

    // Generate recommendations based on crop and soil type
    if (data.cropType.includes('рдЧреЗрд╣реВрдВ')) {
      recommendations.recommendations.push('рдЧреЗрд╣реВрдВ рдХреЗ рд▓рд┐рдП рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдФрд░ рдлреЙрд╕реНрдлреЛрд░рд╕ рдХреА рдЕрдзрд┐рдХ рдЬрд░реВрд░рдд')
      recommendations.fertilizers.push('рдпреВрд░рд┐рдпрд╛ 120 рдХрд┐рд▓реЛ/рд╣реЗрдХреНрдЯреЗрдпрд░', 'DAP 100 рдХрд┐рд▓реЛ/рд╣реЗрдХреНрдЯреЗрдпрд░')
    }

    if (data.soilType.includes('рдХрд╛рд▓реА рдорд┐рдЯреНрдЯреА')) {
      recommendations.recommendations.push('рдХрд╛рд▓реА рдорд┐рдЯреНрдЯреА рдореЗрдВ рдЬрд▓ рдирд┐рдХрд╛рд╕реА рдХрд╛ рд╡рд┐рд╢реЗрд╖ рдзреНрдпрд╛рди рд░рдЦреЗрдВ')
      recommendations.recommendations.push('рдХреИрд▓реНрд╢рд┐рдпрдо рдФрд░ рдореИрдЧреНрдиреАрд╢рд┐рдпрдо рдХреА рдорд╛рддреНрд░рд╛ рдЕрдЪреНрдЫреА рд╣реИ')
    }

    if (data.problems.includes('рдкрддреНрддреЗ рдкреАрд▓реЗ рд╣реЛрдирд╛')) {
      recommendations.warnings.push('рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдХреА рдХрдореА рдХреЗ рд╕рдВрдХреЗрдд')
      recommendations.fertilizers.push('рдпреВрд░рд┐рдпрд╛ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рддреБрд░рдВрдд рдХрд░реЗрдВ')
    }

    if (data.problems.includes('рдорд┐рдЯреНрдЯреА рд╕рдЦреНрдд рд╣реЛрдирд╛')) {
      recommendations.recommendations.push('рдЬреИрд╡рд┐рдХ рдЦрд╛рдж рдФрд░ рдХрдВрдкреЛрд╕реНрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдмрдврд╝рд╛рдПрдВ')
      recommendations.recommendations.push('рдЧрд╣рд░реА рдЬреБрддрд╛рдИ рдХрд░реЗрдВ')
    }

    return recommendations
  }

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white rounded-2xl shadow-lg border border-green-100">
      <div className="mb-8 text-center">
        <h2 className="text-3xl font-bold text-green-800 flex items-center justify-center gap-3">
          ЁЯФм Soil Health Analysis | рдорд┐рдЯреНрдЯреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬрд╛рдВрдЪ | р▓ор▓гр│Нр▓гр▓┐р▓и р▓Жр▓░р│Лр▓Чр│Нр▓п р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр│Ж
        </h2>
        <p className="text-green-600 mt-2">
          Get personalized soil recommendations for better crop yield<br/>
          рдмреЗрд╣рддрд░ рдлрд╕рд▓ рдХреЗ рд▓рд┐рдП рд╡реНрдпрдХреНрддрд┐рдЧрдд рдорд┐рдЯреНрдЯреА рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ<br/>
          р▓Йр▓др│Нр▓др▓о р▓мр│Жр▓│р│Ж р▓Зр▓│р│Бр▓╡р▓░р▓┐р▓Чр▓╛р▓Чр▓┐ р▓╡р│Ир▓пр▓Хр│Нр▓др▓┐р▓Х р▓ор▓гр│Нр▓гр▓┐р▓и р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐
        </p>
      </div>

      {!results ? (
        <div className="space-y-6">
          {/* Location */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              ЁЯУН Location | рд╕реНрдерд╛рди
            </label>
            <input
              type="text"
              value={formData.location}
              onChange={(e) => handleInputChange('location', e.target.value)}
              placeholder="Enter your village/city | рдЕрдкрдирд╛ рдЧрд╛рдБрд╡/рд╢рд╣рд░ рд▓рд┐рдЦреЗрдВ"
              className="w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-500"
            />
          </div>

          {/* Crop Type */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              ЁЯМ╛ Current/Next Crop | рд╡рд░реНрддрдорд╛рди/рдЕрдЧрд▓реА рдлрд╕рд▓
            </label>
            <select
              value={formData.cropType}
              onChange={(e) => handleInputChange('cropType', e.target.value)}
              className="w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-500"
            >
              <option value="">Select Crop | рдлрд╕рд▓ рдЪреБрдиреЗрдВ</option>
              {cropTypes.map((crop, index) => (
                <option key={index} value={crop}>{crop}</option>
              ))}
            </select>
          </div>

          {/* Soil Type */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              ЁЯПФя╕П Soil Type | рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░
            </label>
            <select
              value={formData.soilType}
              onChange={(e) => handleInputChange('soilType', e.target.value)}
              className="w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-500"
            >
              <option value="">Select Soil Type | рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ</option>
              {soilTypes.map((soil, index) => (
                <option key={index} value={soil}>{soil}</option>
              ))}
            </select>
          </div>

          {/* Last Crop */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              ЁЯМ▒ Last Crop | рдкрд┐рдЫрд▓реА рдлрд╕рд▓
            </label>
            <select
              value={formData.lastCrop}
              onChange={(e) => handleInputChange('lastCrop', e.target.value)}
              className="w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-500"
            >
              <option value="">Select Last Crop | рдкрд┐рдЫрд▓реА рдлрд╕рд▓ рдЪреБрдиреЗрдВ</option>
              {cropTypes.map((crop, index) => (
                <option key={index} value={crop}>{crop}</option>
              ))}
            </select>
          </div>

          {/* Irrigation Method */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              ЁЯТз Irrigation Method | рд╕рд┐рдВрдЪрд╛рдИ рдХреА рд╡рд┐рдзрд┐
            </label>
            <select
              value={formData.irrigationMethod}
              onChange={(e) => handleInputChange('irrigationMethod', e.target.value)}
              className="w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-500"
            >
              <option value="">Select Method | рд╡рд┐рдзрд┐ рдЪреБрдиреЗрдВ</option>
              {irrigationMethods.map((method, index) => (
                <option key={index} value={method}>{method}</option>
              ))}
            </select>
          </div>

          {/* Problems */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              тЪая╕П Current Problems | рд╡рд░реНрддрдорд╛рди рд╕рдорд╕реНрдпрд╛рдПрдВ
            </label>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
              {commonProblems.map((problem, index) => (
                <label key={index} className="flex items-center space-x-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={formData.problems.includes(problem)}
                    onChange={() => handleProblemToggle(problem)}
                    className="rounded border-gray-300 text-green-500 focus:ring-green-500"
                  />
                  <span className="text-sm text-gray-700">{problem}</span>
                </label>
              ))}
            </div>
          </div>

          {/* Analyze Button */}
          <button
            onClick={analyzeSoil}
            disabled={!formData.cropType || !formData.soilType || isAnalyzing}
            className="w-full bg-green-500 text-white py-4 rounded-lg font-semibold hover:bg-green-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isAnalyzing ? (
              <div className="flex items-center justify-center gap-2">
                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                Analyzing Soil... | рдорд┐рдЯреНрдЯреА рдХреА рдЬрд╛рдВрдЪ рд╣реЛ рд░рд╣реА рд╣реИ...
              </div>
            ) : (
              'ЁЯФм Analyze Soil Health | рдорд┐рдЯреНрдЯреА рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВ'
            )}
          </button>
        </div>
      ) : (
        <div className="space-y-6">
          {/* Results Header */}
          <div className="text-center">
            <h3 className="text-2xl font-bold text-green-800 mb-2">
              Analysis Results | рдЬрд╛рдВрдЪ рдкрд░рд┐рдгрд╛рдо
            </h3>
            <p className="text-gray-600">Based on your inputs | рдЖрдкрдХреА рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рдЖрдзрд╛рд░ рдкрд░</p>
          </div>

          {/* Soil Health Overview */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-green-50 p-4 rounded-lg border border-green-200">
              <h4 className="font-semibold text-green-800">Overall Health</h4>
              <div className="text-2xl font-bold text-green-600">{results.soilHealth}</div>
            </div>
            <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
              <h4 className="font-semibold text-blue-800">pH Level</h4>
              <div className="text-2xl font-bold text-blue-600">{results.phLevel}</div>
            </div>
            <div className="bg-orange-50 p-4 rounded-lg border border-orange-200">
              <h4 className="font-semibold text-orange-800">Status</h4>
              <div className="text-lg font-bold text-orange-600">Suitable</div>
            </div>
          </div>

          {/* Nutrients */}
          <div>
            <h4 className="text-xl font-bold text-gray-800 mb-4">ЁЯзк Nutrient Levels | рдкреЛрд╖рдХ рддрддреНрд╡</h4>
            <div className="grid grid-cols-3 gap-4">
              <div className="text-center p-4 bg-gray-50 rounded-lg">
                <div className="text-sm text-gray-600">Nitrogen | рдирд╛рдЗрдЯреНрд░реЛрдЬрди</div>
                <div className="font-bold text-lg text-yellow-600">{results.nutrients.nitrogen}</div>
              </div>
              <div className="text-center p-4 bg-gray-50 rounded-lg">
                <div className="text-sm text-gray-600">Phosphorus | рдлреЙрд╕реНрдлреЛрд░рд╕</div>
                <div className="font-bold text-lg text-red-600">{results.nutrients.phosphorus}</div>
              </div>
              <div className="text-center p-4 bg-gray-50 rounded-lg">
                <div className="text-sm text-gray-600">Potassium | рдкреЛрдЯреЗрд╢рд┐рдпрдо</div>
                <div className="font-bold text-lg text-green-600">{results.nutrients.potassium}</div>
              </div>
            </div>
          </div>

          {/* Recommendations */}
          <div>
            <h4 className="text-xl font-bold text-gray-800 mb-4">ЁЯТб Recommendations | рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ</h4>
            <div className="space-y-2">
              {results.recommendations.map((rec, index) => (
                <div key={index} className="flex items-start gap-3 p-3 bg-green-50 rounded-lg">
                  <span className="text-green-500 mt-1">тЬУ</span>
                  <span className="text-green-800">{rec}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Fertilizer Recommendations */}
          {results.fertilizers.length > 0 && (
            <div>
              <h4 className="text-xl font-bold text-gray-800 mb-4">ЁЯМ▒ Fertilizer Guide | рдЦрд╛рдж рдЧрд╛рдЗрдб</h4>
              <div className="space-y-2">
                {results.fertilizers.map((fert, index) => (
                  <div key={index} className="flex items-start gap-3 p-3 bg-blue-50 rounded-lg">
                    <span className="text-blue-500 mt-1">ЁЯзк</span>
                    <span className="text-blue-800">{fert}</span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Warnings */}
          {results.warnings.length > 0 && (
            <div>
              <h4 className="text-xl font-bold text-gray-800 mb-4">тЪая╕П Warnings | рдЪреЗрддрд╛рд╡рдиреА</h4>
              <div className="space-y-2">
                {results.warnings.map((warning, index) => (
                  <div key={index} className="flex items-start gap-3 p-3 bg-red-50 rounded-lg">
                    <span className="text-red-500 mt-1">тЪая╕П</span>
                    <span className="text-red-800">{warning}</span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex gap-4 pt-4">
            <button
              onClick={() => setResults(null)}
              className="flex-1 bg-gray-500 text-white py-3 rounded-lg font-semibold hover:bg-gray-600 transition-colors"
            >
              ЁЯФД New Analysis | рдирдИ рдЬрд╛рдВрдЪ
            </button>
            <button
              onClick={() => window.print()}
              className="flex-1 bg-green-500 text-white py-3 rounded-lg font-semibold hover:bg-green-600 transition-colors"
            >
              ЁЯУД Print Report | рд░рд┐рдкреЛрд░реНрдЯ рдкреНрд░рд┐рдВрдЯ рдХрд░реЗрдВ
            </button>
          </div>
        </div>
      )}
    </div>
  )
}

export default SoilHealthAnalysis